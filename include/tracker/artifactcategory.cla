<?php
/**
* ArtifactCategory.class - Class to handle artifact categories
*
* SourceForge: Breaking Down the Barriers to Open Source Development
* Copyright 1999-2001 (c) VA Linux Systems
* http://sourceforge.net
*
* @version $Id: ArtifactCategory.class,v 1.1.1.1 2004/08/01 19:13:48 devsupaul Exp $
*
*/
require_once(XOOPS_ROOT_PATH."/modules/xfmod/include/Error.class");
class ArtifactCategory extends Error {
var $db;
/** 
* The artifact type object
*
* @var object $ArtifactType
*/
var $ArtifactType; //object
/**
* Array of artifact data
*
* @var array $data_array
*/
var $data_array;
/**
* ArtifactCategory() - constructor
*
* Use this constructor if you are modifying an existing artifact
*
* @param object ArtifactType object
* @param array (all fields from artifact_file_user_vw) OR id from database
* @return true/false
*/
function ArtifactCategory(&$ArtifactType, $data=false) {
global $xoopsDB;
$this->db = $xoopsDB;
$this->Error(); 
//was ArtifactType legit?
if (!$ArtifactType || !is_object($ArtifactType)) {
$this->setError('ArtifactCategory: No Valid ArtifactType');
return false;
}
//did ArtifactType have an error?
if ($ArtifactType->isError()) {
$this->setError('ArtifactCategory: '.$Artifact->getErrorMessage());
return false;
}
$this->ArtifactType =& $ArtifactType;
if ($data) {
if (is_array($data)) {
$this->data_array =& $data;
return true;
} else {
if (!$this->fetchData($data)) {
return false;
} else {
return true;
}
}
} else {
$this->setError('No ID Passed');
}
}
/**
* create() - create a new item in the database
*
* @param string Item name
* @param int User_id of assignee
* @return id on success / false on failure
*/
function create($name, $auto_assign_to) {
global $ts;
//
// data validation
//
if (!$name || !$auto_assign_to) {
$this->setError('ArtifactCategory: '._XF_TRK_AC_NAMEASSIGNEEREQUIRED);
return false;
}
if (!$this->ArtifactType->userIsAdmin()) {
$this->setError('Permission Denied');
return false;
}
$sql = "INSERT INTO ".$this->db->prefix("xf_artifact_category")." (group_artifact_id,category_name,auto_assign_to) "
."VALUES ('".$this->ArtifactType->getID()."','".$ts->makeTboxData4Save($name)."','$auto_assign_to')";
$result = $this->db->queryF($sql);
if ($result && unofficial_getAffectedRows($result) > 0) {
$this->clearError();
return true;
} else {
$this->setError($this->db->error());
return false;
}
}
/**
* fetchData() - re-fetch the data for this ArtifactCategory from the database
*
* @param int ID of the category
* @return true/false
*/
function fetchData($id) {
$res = $this->db->query("SELECT * FROM ".$this->db->prefix("xf_artifact_category")." WHERE id='$id'");
if (!$res || $this->db->getRowsNum($res) < 1) {
$this->setError('ArtifactCategory: Invalid ArtifactCategory ID');
return false;
}
$this->data_array =& $this->db->fetchArray($res);
return true;
}
/**
* getArtifactType() - get the ArtifactType Object this ArtifactCategory is associated with
*
* @return ArtifactType
*/
function &getArtifactType() {
return $this->ArtifactType;
}
/**
* getID() - get this ArtifactCategory's ID
*
* @return the id #
*/
function getID() {
return $this->data_array['id'];
}
/**
* getName() - get the name
*
* @return text name
*/
function getName() {
return $this->data_array['category_name'];
}
/**
* getAssignee() - get the user_id of the person to assign this category to
*
* @return int user_id
*/
function getAssignee() {
return $this->data_array['auto_assign_to'];
}
/**
* update() - update an ArtifactCategory
*
* @param string Name of the category
* @param int user_id of the person this category should auto-assign to
* @return true/false
*/
function update($name,$assign_to) {
global $ts;
if (!$this->ArtifactType->userIsAdmin()) {
$this->setError(_XF_G_PERMISSIONDENIED);
return false;
} 
if (!$name || !$assign_to) {
$this->setError(_XF_TRK_A_MISSINGPARAMETERS);
return false;
} 
$sql = "UPDATE ".$this->db->prefix("xf_artifact_category")." "
."SET category_name='".$ts->makeTboxData4Save($name)."',auto_assign_to='$assign_to' "
."WHERE id='". $this->getID() ."' "
."AND group_artifact_id='".$this->ArtifactType->getID()."'";
$result = $this->db->queryF($sql);
if ($result && unofficial_getAffectedRows($result) > 0) {
return true;
} else {
$this->setError($this->db->error());
return false;
}
}
}
?>